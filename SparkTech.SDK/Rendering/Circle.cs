//  -------------------------------------------------------------------
// 
//  Last updated: 21/08/2017
//  Created: 26/07/2017
// 
//  Copyright (c) Entropy, 2017 - 2017
// 
//  Circle.cs is a part of SparkTech
// 
//  SparkTech is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//  SparkTech is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  GNU General Public License for more details.
//  You should have received a copy of the GNU General Public License
//  along with SparkTech. If not, see <http://www.gnu.org/licenses/>.
// 
//  -------------------------------------------------------------------

namespace SparkTech.SDK.Rendering
{
    #region Using Directives

    using System;

    using SharpDX;
    using SharpDX.Direct3D9;

    using SparkTech.SDK.Entities;

    #endregion

    /// <summary>
    ///     Class Circle
    /// </summary>
    public static class Circle
    {
        #region Constants

        /// <summary>
        ///     The maximum radius a circle can be drawn with
        /// </summary>
        private const float MaxRadius = 20000f;

        #endregion

        #region Constructors and Destructors

        /// <summary>
        ///     Initializes the <see cref="Circle" /> class.
        /// </summary>
        static Circle()
        {
            Initialize();
        }

        #endregion

        #region Properties

        /// <summary>
        ///     Gets or sets the effect.
        /// </summary>
        /// <value>
        ///     The effect.
        /// </value>
        private static Effect Effect { get; set; }

        /// <summary>
        ///     Gets or sets the technique.
        /// </summary>
        /// <value>
        ///     The technique.
        /// </value>
        private static EffectHandle Technique { get; set; }

        /// <summary>
        ///     Gets or sets the vertex buffer.
        /// </summary>
        /// <value>
        ///     The vertex buffer.
        /// </value>
        private static VertexBuffer VertexBuffer { get; set; }

        /// <summary>
        ///     Gets or sets the vertex declaration.
        /// </summary>
        /// <value>
        ///     The vertex declaration.
        /// </value>
        private static VertexDeclaration VertexDeclaration { get; set; }

        /// <summary>
        ///     Gets or sets the vertex elements.
        /// </summary>
        /// <value>
        ///     The vertex elements.
        /// </value>
        private static VertexElement[] VertexElements { get; set; }

        #endregion

        #region Public Methods and Operators

        /// <summary>
        ///     Renders a circle.
        /// </summary>
        /// <param name="color">The color.</param>
        /// <param name="radius">The radius.</param>
        /// <param name="thickness">The thickness.</param>
        /// <param name="filled">if set to <c>true</c> [filled].</param>
        /// <param name="antiAlias">The anti alias thickness.</param>
        /// <param name="worldPositions">The world positions.</param>
        public static void Render(
            Color color,
            float radius,
            float thickness,
            bool filled,
            float antiAlias,
            params Vector3[] worldPositions)
        {
            // Check if the effect is disposed
            if (Effect.IsDisposed) return;

            // Save the current VertexDecleration for restoring later
            var decleration = Renderer.Direct3DDevice.VertexDeclaration;

            // Set the current effect technique and begin the shading process
            Effect.Technique = Technique;
            Effect.Begin();

            // Send data to the GPU using the Direct3DDevice
            Renderer.Direct3DDevice.SetStreamSource(0, VertexBuffer, 0, Utilities.SizeOf<Vector4>());
            Renderer.Direct3DDevice.VertexDeclaration = VertexDeclaration;

            // Loop through the world-space positions to draw the circle
            foreach (var worldPosition in worldPositions)
            {
                // Send all the global variables to the shader
                Effect.BeginPass(0);
                Effect.SetValue(
                    "ProjectionMatrix",
                    Matrix.Translation(worldPosition) * Renderer.ViewMatrix * Renderer.ProjectionMatrix);
                Effect.SetValue("Color", new Vector4(color.R / 255f, color.G / 255f, color.B / 255f, color.A / 255f));
                Effect.SetValue("Radius", radius);
                Effect.SetValue("Width", thickness);
                Effect.SetValue("Filled", filled);
                Effect.SetValue("EnableZ", false);
                Effect.SetValue("antiAlias", antiAlias);
                Effect.EndPass();

                // Draw the primitives in the shader
                Renderer.Direct3DDevice.DrawPrimitives(PrimitiveType.TriangleList, 0, 1);
            }

            // End the shading process
            Effect.End();

            // Restore the previous VertexDecleration
            Renderer.Direct3DDevice.VertexDeclaration = decleration;
        }

        /// <summary>
        ///     Renders a circle.
        /// </summary>
        /// <param name="color">The color.</param>
        /// <param name="radius">The radius.</param>
        /// <param name="worldPositions">The world positions.</param>
        public static void Render(Color color, float radius, params Vector3[] worldPositions)
        {
            Render(color, radius, 1.0f, false, 0.65f, worldPositions);
        }

        /// <summary>
        /// Renders a circle
        /// </summary>
        /// <param name="color"></param>
        /// <param name="radius"></param>
        /// <param name="obj"></param>
        public static void Render(Color color, float radius, IGameObject obj)
        {
            Render(color, radius, 1.0f, false, 0.65f, obj.GetPosition());
        }

        #endregion

        #region Methods

        /// <summary>
        ///     Releases unmanaged and - optionally - managed resources.
        /// </summary>
        private static void Dispose()
        {
            Effect?.Dispose();
            Effect = null;

            Technique?.Dispose();
            Technique = null;

            VertexBuffer?.Dispose();
            VertexBuffer = null;

            VertexDeclaration?.Dispose();
            VertexDeclaration = null;
        }

        /// <summary>
        ///     Initializes this instance.
        /// </summary>
        private static void Initialize()
        {
            // Initialize the vertex buffer, specifying its size, usage, format and pool
            VertexBuffer = new VertexBuffer(
                Renderer.Direct3DDevice,
                Utilities.SizeOf<Vector4>() * 3,
                Usage.WriteOnly,
                VertexFormat.None,
                Pool.Managed);

            // Lock and write the vertices onto the vertex buffer
            VertexBuffer.Lock(0, 0, LockFlags.None).WriteRange(
                new[]
                {
                    new Vector4(-MaxRadius, 0f, -MaxRadius, 1.0f), new Vector4(0f, 0f, MaxRadius, 1.0f),
                    new Vector4(MaxRadius, 0f, -MaxRadius, 1.0f)
                });
            VertexBuffer.Unlock();

            // Specify the vertex elements to be used by the shader
            VertexElements = new[]
                             {
                                 new VertexElement(
                                     0,
                                     0,
                                     DeclarationType.Float4,
                                     DeclarationMethod.Default,
                                     DeclarationUsage.Position,
                                     0),
                                 VertexElement.VertexDeclarationEnd
                             };

            // Initialize the vertex decleration using the previously created vertex elements
            VertexDeclaration = new VertexDeclaration(Renderer.Direct3DDevice, VertexElements);

            #region Source

            /*
            const string effectSource = @"
                struct VS_OUTPUT
                {
                    float4 Position   : POSITION;
                    float4 Color      : COLOR0;
                    float4 Position3D : TEXCOORD0;
                };

                // Globals passed
                float4x4 ProjectionMatrix;
                float4 Color;
                float Radius;
                float Width;
                bool Filled;
                bool EnableZ;
                float antiAlias;

                // Vertex Shader
                VS_OUTPUT VS(VS_OUTPUT input)
                {
                    VS_OUTPUT output = (VS_OUTPUT) 0;
	
                    output.Position = mul(input.Position, ProjectionMatrix);
                    output.Position3D = input.Position;

                    return output;
                }

                // Pixel Shader
                float4 PS(VS_OUTPUT input) : COLOR
                {
                    VS_OUTPUT output = (VS_OUTPUT) 0;

                    output = input;
                    output.Color.x = Color.x;
                    output.Color.y = Color.y;
                    output.Color.z = Color.z;
                    output.Color.w = 0;

                    float4 v = output.Position3D;
                    float distance = sqrt(abs(v.x * v.x + v.z * v.z));
                    float realWidth = Width / 2;

                    // Check if the distance is within our max range
                    if (distance > Radius + realWidth + antiAlias)
                    {
                        return output.Color; 
                    }

                    float edgeDistance = abs(Radius - distance);

                    if(Filled && distance < Radius + realWidth)
                    {
                        // Drawing the pure circle color to fill the circle
                        output.Color.w = Color.w;
                    }
                    else if(!Filled && edgeDistance < realWidth)
                    {
                        // Drawing the pure circle color
                        output.Color.w = Color.w;
                    }
                    else if (edgeDistance < realWidth + antiAlias)
                    {
                        // Drawing antialias
                        output.Color.w = Color.w * (((realWidth + antiAlias) - edgeDistance) / antiAlias);
                    }

                    return output.Color;
                }

                technique Main
                {
                    pass P0
                    {
                        ZEnable = EnableZ;
                        AlphaBlendEnable = TRUE;
                        DestBlend = INVSRCALPHA;
                        SrcBlend = SRCALPHA;
                        VertexShader = compile vs_2_0 VS();
                        PixelShader  = compile ps_2_0 PS();
                    }
                }";

            #endregion

            #region Effect compiling
            
            try
            {
                // Compile source
                using (
                    var dataStream =
                        new EffectCompiler(effectSource, null, null, ShaderFlags.None).CompileEffect(ShaderFlags.None))
                {
                    byte[] buffer = new byte[16 * 1024];
                    using (var memoryStream = new System.IO.MemoryStream())
                    {
                        int read;
                        while ((read = dataStream.Read(buffer, 0, buffer.Length)) > 0)
                        {
                            memoryStream.Write(buffer, 0, read);
                        }
                        var sb = new StringBuilder();
                        sb.Append("var compiledEffect = new byte[] { ");
                        foreach (byte b in memoryStream.ToArray())
                        {
                            sb.AppendFormat("0x{0:x2}, ", b);
                        }
                        sb.Append("};");
                        System.Windows.Forms.Clipboard.SetText(sb.ToString());
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Could not compile Effect:\n{0}", e);
            }
            */

            #endregion

            #region Effect binary

            var compiledEffect = new byte[]
                                 {
                                     0x01, 0x09, 0xff, 0xfe, 0x54, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00,
                                     0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
                                     0x74, 0x72, 0x69, 0x78, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x6c, 0x6f,
                                     0x72, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x07, 0x00, 0x00, 0x00, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0x00,
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
                                     0x57, 0x69, 0x64, 0x74, 0x68, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x69, 0x6c, 0x6c,
                                     0x65, 0x64, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x54, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x08, 0x00, 0x00, 0x00, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x00,
                                     0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
                                     0x61, 0x6e, 0x74, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x10, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x0f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                                     0x50, 0x30, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x4d, 0x61, 0x69, 0x6e,
                                     0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x78, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00,
                                     0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x08, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
                                     0x7c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x48, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00,
                                     0x90, 0x01, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0xb4, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00,
                                     0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00,
                                     0xf0, 0x01, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x14, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x05, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0xe4, 0x05, 0x00, 0x00, 0x00, 0x02, 0xff, 0xff,
                                     0xfe, 0xff, 0x3b, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1c, 0x00, 0x00, 0x00,
                                     0xb7, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00,
                                     0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xb0, 0x00, 0x00, 0x00,
                                     0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x60, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00,
                                     0x70, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x02, 0x00, 0x07, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
                                     0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0xab, 0xab, 0x01, 0x00, 0x03, 0x00,
                                     0x01, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x00, 0xab,
                                     0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0xab,
                                     0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x70, 0x73, 0x5f, 0x32, 0x5f, 0x30, 0x00, 0x4d,
                                     0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29,
                                     0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72,
                                     0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x39, 0x2e,
                                     0x32, 0x39, 0x2e, 0x39, 0x35, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x31, 0x00,
                                     0xfe, 0xff, 0xd3, 0x00, 0x50, 0x52, 0x45, 0x53, 0x01, 0x02, 0x58, 0x46,
                                     0xfe, 0xff, 0x46, 0x00, 0x43, 0x54, 0x41, 0x42, 0x1c, 0x00, 0x00, 0x00,
                                     0xe3, 0x00, 0x00, 0x00, 0x01, 0x02, 0x58, 0x46, 0x04, 0x00, 0x00, 0x00,
                                     0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20, 0xe0, 0x00, 0x00, 0x00,
                                     0x6c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x74, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00,
                                     0x84, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x02, 0x00, 0x02, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
                                     0xc4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0xd0, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x43, 0x6f, 0x6c, 0x6f,
                                     0x72, 0x00, 0xab, 0xab, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x04, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x00, 0xab, 0x00, 0x00, 0x03, 0x00,
                                     0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x57, 0x69, 0x64, 0x74, 0x68, 0x00, 0xab, 0xab, 0x00, 0x00, 0x03, 0x00,
                                     0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x61, 0x6e, 0x74, 0x69, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x00, 0xab, 0xab,
                                     0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x74, 0x78, 0x00, 0x4d, 0x69, 0x63, 0x72, 0x6f,
                                     0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53,
                                     0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d,
                                     0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x39, 0x2e, 0x32, 0x39, 0x2e, 0x39,
                                     0x35, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x31, 0x00, 0xfe, 0xff, 0x0c, 0x00,
                                     0x50, 0x52, 0x53, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0xfe, 0xff, 0x2a, 0x00, 0x43, 0x4c, 0x49, 0x54, 0x14, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0xe0, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x50, 0x00, 0x46, 0x58, 0x4c, 0x43,
                                     0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x50, 0xa0, 0x02, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0xa0,
                                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
                                     0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x40, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x04, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10,
                                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x30, 0x10, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
                                     0x03, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0,
                                     0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x51, 0x00, 0x00, 0x05,
                                     0x09, 0x00, 0x0f, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
                                     0x00, 0x00, 0x80, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x02,
                                     0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x07, 0xb0, 0x05, 0x00, 0x00, 0x03,
                                     0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0xaa, 0xb0, 0x00, 0x00, 0xaa, 0xb0,
                                     0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0xb0,
                                     0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0xff, 0x80, 0x07, 0x00, 0x00, 0x02,
                                     0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x80, 0x06, 0x00, 0x00, 0x02,
                                     0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x03,
                                     0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x00, 0x81, 0x07, 0x00, 0x00, 0xa0,
                                     0x23, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0x80,
                                     0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0x55, 0x81,
                                     0x03, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x80,
                                     0x00, 0x00, 0xaa, 0x80, 0x04, 0x00, 0x00, 0xa0, 0x05, 0x00, 0x00, 0x03,
                                     0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xaa, 0x80, 0x06, 0x00, 0xff, 0xa0,
                                     0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x08, 0x80, 0x00, 0x00, 0x55, 0x80,
                                     0x03, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, 0x80,
                                     0x00, 0x00, 0x55, 0x80, 0x02, 0x00, 0x00, 0xa1, 0x58, 0x00, 0x00, 0x04,
                                     0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0x80, 0x09, 0x00, 0x55, 0xa0,
                                     0x09, 0x00, 0xaa, 0xa0, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x08, 0x80,
                                     0x09, 0x00, 0x55, 0xa0, 0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x80,
                                     0x08, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x55, 0x80, 0x01, 0x00, 0xff, 0x80,
                                     0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xff, 0x80,
                                     0x09, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xaa, 0x80, 0x58, 0x00, 0x00, 0x04,
                                     0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0x55, 0x80, 0x00, 0x00, 0xaa, 0x80,
                                     0x06, 0x00, 0xff, 0xa0, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0x80,
                                     0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0x03,
                                     0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xa0,
                                     0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x80, 0x00, 0x00, 0xaa, 0x80,
                                     0x01, 0x00, 0xff, 0x80, 0x08, 0x00, 0x00, 0xa1, 0x58, 0x00, 0x00, 0x04,
                                     0x00, 0x00, 0x02, 0x80, 0x00, 0x00, 0xaa, 0x80, 0x00, 0x00, 0x55, 0x80,
                                     0x06, 0x00, 0xff, 0xa0, 0x58, 0x00, 0x00, 0x04, 0x00, 0x00, 0x08, 0x80,
                                     0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x55, 0x80, 0x09, 0x00, 0x00, 0xa0,
                                     0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x07, 0x80, 0x05, 0x00, 0xe4, 0xa0,
                                     0x01, 0x00, 0x00, 0x02, 0x00, 0x08, 0x0f, 0x80, 0x00, 0x00, 0xe4, 0x80,
                                     0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x58, 0x01, 0x00, 0x00, 0x00, 0x02, 0xfe, 0xff, 0xfe, 0xff, 0x34, 0x00,
                                     0x43, 0x54, 0x41, 0x42, 0x1c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00,
                                     0x00, 0x02, 0xfe, 0xff, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x20, 0x94, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
                                     0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
                                     0x54, 0x00, 0x00, 0x00, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
                                     0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x00, 0xab, 0xab, 0xab,
                                     0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x73, 0x5f, 0x32,
                                     0x5f, 0x30, 0x00, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74,
                                     0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53, 0x4c, 0x20, 0x53, 0x68,
                                     0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
                                     0x72, 0x20, 0x39, 0x2e, 0x32, 0x39, 0x2e, 0x39, 0x35, 0x32, 0x2e, 0x33,
                                     0x31, 0x31, 0x31, 0x00, 0x51, 0x00, 0x00, 0x05, 0x04, 0x00, 0x0f, 0xa0,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80,
                                     0x00, 0x00, 0x0f, 0x90, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x01, 0xc0,
                                     0x00, 0x00, 0xe4, 0x90, 0x00, 0x00, 0xe4, 0xa0, 0x09, 0x00, 0x00, 0x03,
                                     0x00, 0x00, 0x02, 0xc0, 0x00, 0x00, 0xe4, 0x90, 0x01, 0x00, 0xe4, 0xa0,
                                     0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x04, 0xc0, 0x00, 0x00, 0xe4, 0x90,
                                     0x02, 0x00, 0xe4, 0xa0, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x08, 0xc0,
                                     0x00, 0x00, 0xe4, 0x90, 0x03, 0x00, 0xe4, 0xa0, 0x01, 0x00, 0x00, 0x02,
                                     0x00, 0x00, 0x0f, 0xd0, 0x04, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x02,
                                     0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0xe4, 0x90, 0xff, 0xff, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00,
                                     0x00, 0x02, 0x58, 0x46, 0xfe, 0xff, 0x24, 0x00, 0x43, 0x54, 0x41, 0x42,
                                     0x1c, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x46,
                                     0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x20,
                                     0x58, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
                                     0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x00, 0x00, 0x00, 0x01, 0x00,
                                     0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x74, 0x78, 0x00, 0x4d, 0x69, 0x63, 0x72, 0x6f,
                                     0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c, 0x53,
                                     0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d,
                                     0x70, 0x69, 0x6c, 0x65, 0x72, 0x20, 0x39, 0x2e, 0x32, 0x39, 0x2e, 0x39,
                                     0x35, 0x32, 0x2e, 0x33, 0x31, 0x31, 0x31, 0x00, 0xfe, 0xff, 0x02, 0x00,
                                     0x43, 0x4c, 0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x0c, 0x00,
                                     0x46, 0x58, 0x4c, 0x43, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x10,
                                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
                                     0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f,
                                     0xff, 0xff, 0x00, 0x00
                                 };

            #endregion

            // Load the effect from memory
            Effect = Effect.FromMemory(Renderer.Direct3DDevice, compiledEffect, ShaderFlags.None);

            // Set the only technique in the shaders
            Technique = Effect.GetTechnique(0);

            // Listen to events
            AppDomain.CurrentDomain.DomainUnload += (sender, args) => Dispose();
            AppDomain.CurrentDomain.ProcessExit += (sender, args) => Dispose();

            Renderer.OnReset += args =>
            {
                Unload();
                Reset();
            };
        }

        /// <summary>
        ///     Resets this instance.
        /// </summary>
        private static void Reset()
        {
            Effect?.OnResetDevice();
        }

        /// <summary>
        ///     Unloads this instance.
        /// </summary>
        private static void Unload()
        {
            Effect?.OnLostDevice();
        }

        #endregion
    }
}